import pygame
import sys
pygame.init()

fenetre_size = 500
fenetre = pygame.display.set_mode((fenetre_size, fenetre_size))
pygame.display.set_caption("Tic Tac Toe")

#la police 
font = pygame.font.Font(None, 36)

# Initialise la grille de jeu
grille = [['' for _ in range(3)] for _ in range(3)]

#fonction pour l'arriére plan 
def arriére_plan():
    for i in range (1 , 3):
        pygame.draw.line(fenetre, (200, 235, 205), (i * fenetre_size // 3, 0), (i * fenetre_size // 3, fenetre_size), 2)
        pygame.draw.line(fenetre, (200, 235 , 205),(0, i * fenetre_size // 3), (fenetre_size, i * fenetre_size // 3), 2)
fenetre.fill((200, 200, 200))
arriére_plan()
pygame.display.flip()

#fonction pour la logique d'éxercice
def afficher_symboles():
    for i in range (3):                                     #parcourire les 3 lignes
        for j in range(3):                               #parcourire les 3 colonnes  
            symbole = grille[i][j]    
            if symbole !='':
                text = font.render(symbole, True , (0 , 0, 0))
                text_rect = text.get_rect(center=(j *fenetre_size // 3 + fenetre_size // 6 , i* fenetre_size // 3 + fenetre_size //6))
                fenetre.blit(text , text_rect)

#fonction pour la vérification des colonnes  et lignes 
def verification_colonnes():
    for i in range (3):
        if grille[i][0] == grille[i][1] == grille[i][2] != '':           #vérification colonne 
            return True
        if grille[0][i] == grille[1][i] == grille[2][i] != '':            #vérification lignes
            return True
        
    #vérification des diagonales
    if grille[0][0] == grille[1][1] == grille[2][2] != '':
        return True
    if grille [2][0] == grille[1][1] == grille [0][2] != '':
        return True
    return False
def verification_match_nul():
    return all(grille[i][j] != '' for i in range(3) for j in range(3))

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    afficher_symboles()